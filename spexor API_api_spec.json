{"openapi":"3.0.1","info":{"title":"Spexor Public API","description":"This API is for integrating your spexor devices with third-party applications.\nAuthentication and authorization of the Spexor Public API is based on OAuth 2 **device authorization access tokens**.","version":"v1"},"servers":[{"url":"https://api.spexor-bosch.com"}],"tags":[{"name":"Authorization","description":"Get an OAuth 2 token - keycloak-controller","x-internal-order":"1"},{"name":"Spexor management","description":"Get spexor data and manage your devices remotely - device-controller","x-internal-order":"2"},{"name":"Webhook management","description":"Subscribe webhooks for notifications about spexor changes - webhook-controller","x-internal-order":"3"},{"name":"Webhook testing","description":"Test your webhook configuration by sending a test event - webhook-event-controller","x-internal-order":"4"}],"paths":{"/api/public/auth":{"post":{"tags":["Authorization"],"summary":"Initiate a device code flow authorization.","description":"This is the first step in the auth flow.\n\nThis request will be pending for at least 1 hour to grant this application access to your device. This needs to be done once, manually on your spexor app.\n\nUpon success you will retrieve the user_code and the device_code.\n\n**Tip:** Copy the device_code to your clipboard as you will need it for the **POST /api/public/token request.**","operationId":"deviceAuthRequest","parameters":[{"name":"client_id","in":"query","description":"client_id for authorization. e.g. use the public token spexor-3rdparty-service-auth","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"*Device code flow request successful.*","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceAuthRequest"}}}},"502":{"description":"*Error in communication.*"}},"x-internal-order":"101"}},"/api/public/token":{"post":{"tags":["Authorization"],"summary":"Get an access token (JWT).","description":"The token you will retrieve as a response will be the token which you can use to authorize for the other spexor resources.\n\n**Tip:** Copy the *bearer token* and paste it in the *Authorize* pop-up at the start of this page.","operationId":"deviceAuthToken","parameters":[{"name":"client_id","in":"query","description":"client_id for authorization. e.g. use the public token spexor-3rdparty-service-auth","required":true,"schema":{"type":"string"}},{"name":"device_code","in":"query","description":"device_code from authorization request. **Tip:** If you don't have a device_code yet, start at resource **POST /api/public/auth**","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"*Token returned successful.*","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceAuthToken"}}}},"502":{"description":"*Error in communication.*"}},"x-internal-order":"102"}},"/api/public/refresh":{"post":{"tags":["Authorization"],"summary":"Refresh the access token (JWT).","description":"Use the refresh_token to re-new the access_token.\nIf the refresh_token gets lost, start at **POST /api/public/token.**","operationId":"deviceAuthTokenRefresh","parameters":[{"name":"client_id","in":"query","description":"client_id for authorization. e.g. use the public token spexor-3rdparty-service-auth","required":true,"schema":{"type":"string"}},{"name":"refresh_token","in":"query","description":"refresh_token from access token","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"*Token returned successful.*","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeviceAuthToken"}}}},"502":{"description":"*Error in communication.*"}},"x-internal-order":"103"}},"/api/public/v1/spexors":{"get":{"tags":["Spexor management"],"summary":"Get all spexors.","description":"Retrieve a list of all spexor devices visible in the context of this application.","operationId":"getSpexorsByUserId","parameters":[],"responses":{"200":{"description":"*Spexors returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SpexorDevice_StatusBasic"}}}}},"400":{"description":"*Unexpected error.*"},"502":{"description":"*Error talking to other service.*"}},"security":[{"token":[]}],"x-internal-order":"201"}},"/api/public/v1/spexors/location":{"get":{"tags":["Spexor management"],"summary":"Get all spexors' locations.","description":"Retrieve a list of all spexor devices visible in the context of this application, including their location coordinates.","operationId":"getSpexorById","parameters":[],"responses":{"200":{"description":"*Spexors returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SpexorDevice_Location"}}}}},"400":{"description":"*Unexpected error.*"},"502":{"description":"*Error talking to other service.*"}},"security":[{"token":[]}],"x-internal-order":"202"}},"/api/public/v1/spexor/{id}":{"get":{"tags":["Spexor management"],"summary":"Get the complete information for a specific spexor.","description":"Retrieve all fields of the spexor device specified in the id path parameter.","operationId":"getSpexorDeviceById","parameters":[{"name":"id","in":"path","description":"ID of your spexor device","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"*Spexors returned successfully.*","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SpexorDevice_StatusFull"}}}},"400":{"description":"*Unexpected error.*"},"404":{"description":"*Device not found.*"},"412":{"description":"*Device mapping exception.*"}},"security":[{"token":[]}],"x-internal-order":"203"}},"/api/public/v1/spexor/{id}/sensor":{"get":{"tags":["Spexor management"],"summary":"Get information for spexor sensors.","description":"Retrieve the sensor fields of the spexor device specified in the id path parameter.\nThe key identifies the sensor:\n* AirQuality\n* AirQualityLevel\n* Temperature\n* Pressure\n* Acceleration\n* Light\n* Gas\n* Humidity\n* Microphone\n* PassiveInfrared\n* Fire\n* CO\n* Narcotics\n\nThe result will contain following set of information per sensor:\n* The key identifies the sensor\n* The timestamp shows the time (UTC) of the last update\n* The value contains the latest measured value\n* The minvalue is the lowest value measured between the last sync and the new sending timepoint\n* The maxvalue is the highest value measured between the last sync and the new sending timepoint\n* The unit is sensor specific (e.g. physical unit, percentage)","operationId":"getSensorValues","parameters":[{"name":"id","in":"path","description":"ID of your spexor device","required":true,"schema":{"type":"string"}},{"name":"keys","in":"query","description":"sensors types - see list above\n\n**Tip:** Click 'Try it out' and then the 'Add item' button to get an input field. For requesting data of multiple sensors use a separate field for each key. Make sure not to have an empty field when clicking 'Execute'.","required":true,"schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"*Spexors returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SensorDataInformation"}}}}},"400":{"description":"*Unexpected error.*"},"404":{"description":"*Device not found.*"},"412":{"description":"*Device mapping exception.*"},"502":{"description":"*Error talking to other service.*"}},"security":[{"token":[]}],"x-internal-order":"204"}},"/api/public/v1/spexor/{id}/status/observation":{"patch":{"tags":["Spexor management"],"summary":"Set spexor observation status.","description":"Activate or deactivate the observation status of one or multiple sensors on your spexor device.\n\nApplicable for:\n* Burglary\n* Fire\n* CO\n* Narcotics\n* MinTemperature\n* MaxTemperature","operationId":"setObservationStates","parameters":[{"name":"id","in":"path","description":"ID of your spexor device","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ObservationStateChangeRequest_StatusFull"}}}},"required":true},"responses":{"200":{"description":"*Spexors returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SpexorDeviceObservationStatus_StatusFull"}}}}},"400":{"description":"*Unexpected error.*"},"404":{"description":"*Device not found.*"},"412":{"description":"*Device mapping exception.*"},"502":{"description":"*Error talking to other service.*"}},"security":[{"token":[]}],"x-internal-order":"205"}},"/api/public/v1/webhooks":{"get":{"tags":["Webhook management"],"summary":"Get all webhooks.","description":"List all your webhooks which are registered so far","operationId":"getWebhooks","parameters":[],"responses":{"200":{"description":"*Webhooks returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Webhook"}}}}}},"security":[{"token":[]}],"x-internal-order":"301"},"post":{"tags":["Webhook management"],"summary":"Register a webhook.","description":"Register a new webhook, which will be allowed to get events related to your spexor devices.\n\nFor example your application can automatically get informed about an important event like a Burglary detected by spexor.\n\nEvents you can subscribe for:\n* \"DeviceStatus\"\n* \"Burglary\"\n* \"Fire\"\n* \"CO\"\n* \"Temperature\"\n* \"Test\"","operationId":"registerWebhook","parameters":[],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Webhook"}}},"required":true},"responses":{"201":{"description":"*Webhook registered successfully.*","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Webhook"}}}},"400":{"description":"*Scheme or URL error.*"},"409":{"description":"*Webhook with same URL exists.*"}},"security":[{"token":[]}],"x-internal-order":"302"}},"/api/public/v1/webhooks/{id}":{"put":{"tags":["Webhook management"],"summary":"Update a webhook.","description":"Update the URL and/or the events to subscribe for.","operationId":"updateWebhook","parameters":[{"name":"id","in":"path","description":"Identifier of the webhook which is to be updated","required":true,"schema":{"type":"string"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Webhook"}}},"required":true},"responses":{"204":{"description":"*Webhook updated successfully.*"},"400":{"description":"*Scheme or URL error.*"},"404":{"description":"*Webhook not found.*"},"409":{"description":"*Webhook with same URL exists.*"}},"security":[{"token":[]}],"x-internal-order":"303"},"delete":{"tags":["Webhook management"],"summary":"Delete a webhook.","description":"Delete the connection if the webhook should not retrieve further events.","operationId":"deleteWebhook","parameters":[{"name":"id","in":"path","description":"Identifier of the webhook which is to be deleted","required":true,"schema":{"type":"string"}}],"responses":{"204":{"description":"*Webhook deleted successfully.*"},"404":{"description":"*Webhook not found.*"}},"security":[{"token":[]}],"x-internal-order":"304"}},"/api/public/v1/webhooks/{id}/log":{"get":{"tags":["Webhook management"],"summary":"Get logs for a webhook.","description":"Retrieve a list of all events that occurred while trying to invoke the webhook configuration.\n\nThe endpoint returns the latest 10 (configurable) events overall.\n\nTest events are not stored in the event history.","operationId":"getWebhookEventLog","parameters":[{"name":"id","in":"path","description":"ID of your webhook","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"*Logs returned successfully.*","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/WebhookEventLogEntity"}}}}},"404":{"description":"*Webhook not found.*"}},"security":[{"token":[]}],"x-internal-order":"305"}},"/api/public/v1/webhooks/event/test":{"post":{"tags":["Webhook testing"],"summary":"Send a test webhook event.","operationId":"webhookEventTest","parameters":[],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/WebhookTestEvent"}}},"required":true},"responses":{"200":{"description":"*Webhook test event posted successfully.*"},"400":{"description":"*Webhook doesn't support Test events.*"},"404":{"description":"*Webhook not found.*"}},"security":[{"token":[]}],"x-internal-order":"401"}}},"components":{"schemas":{"Webhook":{"required":["events","url"],"type":"object","properties":{"id":{"type":"string","readOnly":true},"url":{"type":"string"},"events":{"type":"array","items":{"type":"string","enum":["DeviceStatus","Burglary","Fire","CO","Temperature","Test"]}},"headers":{"type":"object","additionalProperties":{"type":"string"}}}},"WebhookTestEvent":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string","enum":["DeviceStatus","Burglary","Fire","CO","Temperature","Test"]},"notificationKey":{"type":"string"},"timestamp":{"type":"string","format":"date-time"},"webhookId":{"type":"string","writeOnly":true}}},"DeviceAuthToken":{"type":"object","properties":{"access_token":{"type":"string"},"expires_in":{"type":"integer","format":"int64"},"refresh_expires_in":{"type":"integer","format":"int64"},"refresh_token":{"type":"string"},"token_type":{"type":"string"},"scope":{"type":"string"}}},"DeviceAuthRequest":{"type":"object","properties":{"device_code":{"type":"string"},"user_code":{"type":"string"},"expires_in":{"type":"integer","format":"int64"},"interval":{"type":"integer","format":"int32"},"verification_uri":{"type":"string"}}},"ObservationStateChangeRequest_StatusFull":{"type":"object","properties":{"observationType":{"type":"string","enum":["Burglary","Fire","CO","Narcotics","MinTemperature","MaxTemperature"]},"sensorMode":{"type":"string","enum":["Deactivated","Activated"]}}},"SpexorDeviceObservationStatus_StatusFull":{"type":"object","properties":{"observationType":{"type":"string","enum":["Burglary","Fire","CO","Narcotics","MinTemperature","MaxTemperature"]},"sensorMode":{"type":"string","enum":["Deactivated","InActivation","InCalibration","Activated","Triggered","InDeactivation"]}}},"WebhookEventLogEntity":{"type":"object","properties":{"url":{"type":"string"},"body":{"type":"string"},"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"result":{"type":"string"},"timestamp":{"type":"string","format":"date-time"},"webhookId":{"type":"string"}}},"SpexorDeviceObservationStatus_StatusBasic":{"type":"object","properties":{"observationType":{"type":"string","enum":["Burglary","Fire","CO","Narcotics","MinTemperature","MaxTemperature"]},"sensorMode":{"type":"string","enum":["Deactivated","InActivation","InCalibration","Activated","Triggered","InDeactivation"]}}},"SpexorDeviceProfile_StatusBasic":{"type":"object","properties":{"name":{"type":"string"},"profileType":{"type":"string","enum":["House","GardenHouse","Car","Camper"]}}},"SpexorDeviceStatus_StatusBasic":{"type":"object","properties":{"lastConnected":{"type":"string","format":"date-time"},"online":{"type":"boolean"},"version":{"type":"string"},"stateOfCharge":{"type":"string","format":"byte"},"updateAvailable":{"type":"boolean"},"observationStatus":{"type":"array","items":{"$ref":"#/components/schemas/SpexorDeviceObservationStatus_StatusBasic"}}}},"SpexorDevice_StatusBasic":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"profile":{"$ref":"#/components/schemas/SpexorDeviceProfile_StatusBasic"},"status":{"$ref":"#/components/schemas/SpexorDeviceStatus_StatusBasic"}}},"SpexorDevice_Location":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"location":{"$ref":"#/components/schemas/SpexorLocation_Location"}}},"SpexorLocation_Location":{"type":"object","properties":{"latitude":{"type":"number","format":"double"},"longitude":{"type":"number","format":"double"},"hdop":{"type":"number","format":"double"},"gpsState":{"type":"string","enum":["VeryGood","Good","Weak","NotAvailable"]},"statusTimestamp":{"type":"string","format":"date-time"},"name":{"type":"string"}}},"Connection_StatusFull":{"type":"object","properties":{"lastConnected":{"type":"string","format":"date-time"},"online":{"type":"boolean"},"connectionType":{"type":"string","enum":["MobileNetwork","Wifi","UNKNOWN"]}}},"Energy_StatusFull":{"type":"object","properties":{"stateOfCharge":{"$ref":"#/components/schemas/StateOfCharge_StatusFull"},"energyMode":{"type":"string","enum":["EnergySavingOff","EnergySavingAlwaysOn","EnergySavingOnBattery","Unknown"]},"isPowered":{"type":"boolean"}}},"Firmware_StatusFull":{"type":"object","properties":{"currentVersion":{"type":"string"},"state":{"type":"string","enum":["UpToDate","UpdateAvailable","Scheduled","Installing","InstallationFailed","Unknown"]},"availableVersion":{"type":"string"}}},"SpexorDeviceProfile_StatusFull":{"type":"object","properties":{"name":{"type":"string"},"profileType":{"type":"string","enum":["House","GardenHouse","Car","Camper"]}}},"SpexorDeviceStatus_StatusFull":{"type":"object","properties":{"energy":{"$ref":"#/components/schemas/Energy_StatusFull"},"connection":{"$ref":"#/components/schemas/Connection_StatusFull"},"firmware":{"$ref":"#/components/schemas/Firmware_StatusFull"},"observation":{"type":"array","items":{"$ref":"#/components/schemas/SpexorDeviceObservationStatus_StatusFull"}}}},"SpexorDevice_StatusFull":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"profile":{"$ref":"#/components/schemas/SpexorDeviceProfile_StatusFull"},"status":{"$ref":"#/components/schemas/SpexorDeviceStatus_StatusFull"},"sensors":{"type":"array","items":{"type":"string","enum":["AirQuality","AirQualityLevel","Temperature","Pressure","Acceleration","Light","Gas","Humidity","Microphone","PassiveInfrared","Fire","CO","Narcotics"]}}}},"StateOfCharge_StatusFull":{"type":"object","properties":{"value":{"type":"integer","format":"int32"},"unit":{"type":"string"}}},"SensorDataInformation":{"type":"object","properties":{"key":{"type":"string","enum":["AirQuality","AirQualityLevel","Temperature","Pressure","Acceleration","Light","Gas","Humidity","Microphone","PassiveInfrared","Fire","CO","Narcotics"]},"timestamp":{"type":"string","format":"date-time"},"value":{"type":"number"},"minValue":{"type":"number"},"maxValue":{"type":"number"},"unit":{"type":"string"}}}},"securitySchemes":{"token":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}